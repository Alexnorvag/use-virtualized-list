{"version":3,"sources":["index.js","useVirtualizedList.js"],"names":["dataList","Array","keys","colors","style","position","width","height","borderBottom","boxShadow","margin","top","left","right","bottom","overflowY","index","backgroundColor","length","ReactDOM","render","rowHeight","overscanRowCount","wrapper","useRef","useState","scrollPosition","setScrollPosition","visibleWrapperHeight","setVisibleWrapperHeight","getWrapper","current","useEffect","addEventListener","e","target","scrollTop","visibleHeight","parseFloat","window","getComputedStyle","getPropertyValue","elementPos","useVirtualizedList","isItemVisible","container","listWrapper","list","item","ref","map","listItem","key","document","getElementById"],"mappings":"4LAKMA,EAAQ,YAAOC,MAAM,MAAMC,QAE3BC,EAAS,CAAC,UAAW,UAAW,UAAW,WAE3CC,EACO,CACTC,SAAU,WACVC,MAAO,OACPC,OAAQ,OACRC,aAAc,OACdC,UAAW,gCACXC,OAAQ,UAPNN,EASS,CACXC,SAAU,WACVM,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,UAAW,QAfTX,EAiBE,SAAAG,GAAM,MAAK,CACfF,SAAU,WACVE,WAnBEH,EAqBE,SAACY,EAAOT,GAAR,MAAoB,CACxBF,SAAU,WACVM,IAAKJ,EAASS,EACdJ,KAAM,EACNC,MAAO,EACPN,SACAU,gBAAiBd,EAAOa,EAAQb,EAAOe,UA0B3CC,IAASC,OAAO,mBAtBJ,SAAC,GAAwB,IAAD,IAArBC,iBAAqB,MAAT,GAAS,ICtCF,SAAC,GAG5B,IAAD,IAFJC,wBAEI,MAFe,EAEf,MADJD,iBACI,MADQ,GACR,EACEE,EAAUC,iBAAO,MADnB,EAEwCC,mBAAS,GAFjD,mBAEGC,EAFH,KAEmBC,EAFnB,OAGoDF,mBAAS,GAH7D,mBAGGG,EAHH,KAGyBC,EAHzB,KAiBEC,EAAa,kBAAMP,EAAQQ,SAgBjC,OAdAC,qBAAU,WACRF,IAAaG,iBACX,UACA,SAAAC,GAAC,OAAIP,EAAkBO,EAAEC,OAAOC,cAChC,GAGF,IAAMC,EAAgBC,WACpBC,OAAOC,iBAAiBV,IAAc,MAAMW,iBAAiB,WAG/DZ,EAAwBQ,KACvB,IAEI,CAACd,EA5Bc,SAAAP,GACpB,IAAM0B,EAAa1B,EAAQK,EAQ3B,OALEqB,EAAahB,EAAiBJ,EAAmBD,GAEjDqB,EAAarB,EACbK,EAAiBE,EAAuBN,EAAmBD,IDwB9BsB,CAAmB,CAAEtB,cADpB,mBAC3BE,EAD2B,KAClBqB,EADkB,KAE1BC,EAAuCzC,EAA5B0C,EAA4B1C,EAAf2C,EAAe3C,EAAT4C,EAAS5C,EAE/C,OACE,yBAAKA,MAAOyC,GACV,yBAAKzC,MAAO0C,EAAaG,IAAK1B,GAC5B,yBAAKnB,MAAO2C,EAAK/C,EAASkB,OAASG,IAChCrB,EAASkD,KACR,SAACC,EAAUnC,GAAX,OACE4B,EAAc5B,IACZ,yBAAKoC,IAAKpC,EAAOZ,MAAO4C,EAAKhC,EAAOK,IAApC,uBACmB8B,YAUnB,MAASE,SAASC,eAAe,U","file":"static/js/main.515aaa06.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { useVirtualizedList } from \"./useVirtualizedList\";\n\nconst dataList = [...Array(9999).keys()];\n\nconst colors = [\"#ff77aa\", \"#aaff77\", \"#77aaff\", \"#ffffff\"];\n\nconst style = {\n  container: {\n    position: \"relative\",\n    width: \"50vw\",\n    height: \"50vh\",\n    borderBottom: \"none\",\n    boxShadow: \"0 1px 5px rgba(0, 0, 0, 0.46)\",\n    margin: \"0 auto\"\n  },\n  listWrapper: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflowY: \"auto\"\n  },\n  list: height => ({\n    position: \"relative\",\n    height\n  }),\n  item: (index, height) => ({\n    position: \"absolute\",\n    top: height * index,\n    left: 0,\n    right: 0,\n    height,\n    backgroundColor: colors[index % colors.length]\n  })\n};\n\nconst App = ({ rowHeight = 50 }) => {\n  const [wrapper, isItemVisible] = useVirtualizedList({ rowHeight });\n  const { container, listWrapper, list, item } = style;\n\n  return (\n    <div style={container}>\n      <div style={listWrapper} ref={wrapper}>\n        <div style={list(dataList.length * rowHeight)}>\n          {dataList.map(\n            (listItem, index) =>\n              isItemVisible(index) && (\n                <div key={index} style={item(index, rowHeight)}>\n                  {`Item number: ${listItem}`}\n                </div>\n              )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nexport const useVirtualizedList = ({\r\n  overscanRowCount = 5,\r\n  rowHeight = 30\r\n}) => {\r\n  const wrapper = useRef(null);\r\n  const [scrollPosition, setScrollPosition] = useState(0);\r\n  const [visibleWrapperHeight, setVisibleWrapperHeight] = useState(0);\r\n\r\n  const isItemVisible = index => {\r\n    const elementPos = index * rowHeight;\r\n\r\n    const topOvercount =\r\n      elementPos > scrollPosition - overscanRowCount * rowHeight;\r\n    const botOvercount =\r\n      elementPos + rowHeight <\r\n      scrollPosition + visibleWrapperHeight + overscanRowCount * rowHeight;\r\n\r\n    return topOvercount && botOvercount;\r\n  };\r\n\r\n  const getWrapper = () => wrapper.current;\r\n\r\n  useEffect(() => {\r\n    getWrapper().addEventListener(\r\n      \"scroll\",\r\n      e => setScrollPosition(e.target.scrollTop),\r\n      true\r\n    );\r\n\r\n    const visibleHeight = parseFloat(\r\n      window.getComputedStyle(getWrapper(), null).getPropertyValue(\"height\")\r\n    );\r\n\r\n    setVisibleWrapperHeight(visibleHeight);\r\n  }, []);\r\n\r\n  return [wrapper, isItemVisible];\r\n};"],"sourceRoot":""}